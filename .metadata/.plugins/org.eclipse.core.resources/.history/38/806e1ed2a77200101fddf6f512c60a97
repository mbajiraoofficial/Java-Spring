package com.sample.Config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableMethodSecurity
public class SecurityConfig {

	@Bean
	public PasswordEncoder passwordEncoder()
	{
		return new BCryptPasswordEncoder();
	}
	
	
	@Bean
	public AuthenticationManager authenticationManager(
			HttpSecurity http, 
			UserDetailsService userDetailService,
			PasswordEncoder passwordEncoder
			) throws Exception
	{
	   AuthenticationManagerBuilder builder=
			   http.getSharedObject(AuthenticationManagerBuilder.class);
	   builder.userDetailsService(userDetailService)
	   .passwordEncoder(passwordEncoder);
	   return builder.build();
	}
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) 
			throws Exception
	{
		http
		.csrf(x->x.disable())
		.authorizeHttpRequests(auth->
		auth.requestMatchers("/login","/css/**").permitAll()
		.requestMatchers("/admin/**").hasRole("ADMIN")
		.requestMatchers("/user/**").hasAnyRole("ADMIN","USER")
		.anyRequest().authenticated()
		)
		.formLogin(form->form.loginPage("/login")
				.loginProcessingUrl("/login")
				.defaultSuccessUrl("/home",true)
				.permitAll())
		.logout(logout->logout
				.logoutUrl("/logout")
				.logoutSuccessUrl("/login?logout")
				.invalidateHttpSession(true)
				.deleteCookies("JSESSIONID")
				.permitAll());
		return http.build();
	}
	
	
	
}
